---
name: Context Analyzer
description: Analyze Claude Code context for relevance and optimization
---
# Claude Code Context Analysis

Please analyze this Claude Code context output and provide a comprehensive report.

## Context Output:
{{CONTEXT_PASTE}}

---

## Analysis Required:

### 0. Context Hierarchy Visualization
Provide a visual tree showing:
- **Global vs Project-Specific** context sources
- **Scope indicators**: 🌍 Global | 📁 Project | 💾 System
- **Status indicators**: ✅ Optimized | ⚠️ Review | ❌ Remove | 💡 Opportunity
- **Token breakdown** by category and source
- **File paths** showing where each config lives

Format:
```
📊 Total Context: [X]k/200k tokens (X%)
│
├─ 🌍 GLOBAL CONTEXT (System-wide from ~/.config/claude-code/)
│  ├─ System Prompt [Xk] ........... (X%)
│  ├─ System Tools [Xk] ............ (X%)
│  └─ MCP Servers [Xk] ............. (X%)
│     └─ [list servers with token counts]
│
├─ 🏠 PROJECT CONTEXT (Project-specific from ./project/.claude/)
│  ├─ Memory Files [Xk] ............ (X%)
│  │  └─ [list files with status indicators]
│  ├─ Custom Agents [Xk] ........... (X%)
│  │  ├─ 🌍 Global agents: [list]
│  │  └─ 📁 Project agents: [list]
│  └─ Slash Commands [X] ........... (X token allocation)
│
└─ 💬 CONVERSATION CONTEXT
   ├─ Messages [X] ................. (X%)
   ├─ Free Space [Xk] .............. (X%)
   └─ Autocompact Buffer [Xk] ...... (X%)

📍 Context Sources:
  🌍 Global: [path]
  📁 Project: [path]
  💾 System: Built-in
```

### 1. File Relevance Assessment
For each file in the context:
- **Purpose**: Why is this file likely included?
- **Relevance**: High/Medium/Low for typical Claude Code workflows
- **Size Impact**: Token usage estimate
- **Recommendation**: Keep, Remove, or Conditional

### 2. Navigation Paths
Provide suggested viewing order for understanding this codebase:
- Start with [file] to understand [concept]
- Then view [file] to see [implementation]
- Follow up with [file] for [details]

Include task-specific navigation:
- For [common task 1] → Read [files]
- For [common task 2] → Read [files]

### 3. Memory File Optimization (CLAUDE.md, etc.)

**Content to ADD:**
- Missing architecture context
- Undocumented modules or patterns
- Important file relationships
- Development workflows not mentioned

**Content to REMOVE:**
- Outdated information
- Redundant descriptions
- Over-detailed sections that bloat context
- Historical information better suited for CHANGELOG

**Content to CLARIFY:**
- Ambiguous descriptions
- Missing examples
- Unclear relationships

**Estimate token savings** for each recommendation.

### 4. Agent & Command Analysis

#### 4a. Custom Agents Review
List all agents with:
- Current scope (Global 🌍 or Project 📁)
- Token cost
- Relevance to this project (High/Medium/Low)
- Recommendation (Keep/Remove/Move to Project/Move to Global)

#### 4b. Agent Scope Optimization
Create a table showing:
| Agent | Current Scope | Recommended Scope | Reason | Migration Command |
|-------|---------------|-------------------|--------|-------------------|

**Recommendations:**
- **Promote to Global**: Agents useful across all projects
- **Demote to Project**: Agents specific to this project type
- **Remove from Global**: Agents not relevant (reduces context for ALL projects)
- **Create Project-Specific**: New agents needed for this project

Provide bash commands for migrations.

#### 4c. Slash Commands
List existing commands and recommend additions:
- Which commands to document better
- Useful additions for this project type
- Example command definitions

### 5. MCP Server Analysis

For each MCP server loaded:

**Tool categorization:**
- Group tools by purpose (file ops, search, browser, etc.)
- Assess relevance to project (High/Medium/Low)
- Calculate token cost per category

**Recommendations:**
- Which MCP servers are essential vs unused
- Suggest project-specific MCP config to filter tools
- Provide example `.claude/mcp.json` configuration

**Example format:**
```
desktop-commander (23.4k tokens - 25 tools)

📁 File Operations (8 tools, ~7k) - ✅ HIGH RELEVANCE
🔍 Search (4 tools, ~4k) - ✅ HIGH RELEVANCE
⚙️ Process (5 tools, ~6k) - 🟡 MEDIUM RELEVANCE
🌐 Browser/Web (8 tools, ~6k) - ❌ LOW RELEVANCE

Recommendation: Filter to only file/search/process tools
Estimated savings: ~6k tokens
```

### 6. Context Efficiency Benchmarks

Compare this project to typical projects:

| Metric | This Project | Small | Medium | Large |
|--------|-------------|-------|--------|-------|
| Memory files | Xk | 2-5k | 5-15k | 15-30k |
| Agents | X | 0-200 | 200-600 | 600-1.5k |
| Total used | Xk | 30-60k | 60-120k | 120-180k |
| Efficiency | 🟢/🟡/🔴 | - | - | - |

**Assessment**: Is context usage appropriate for project size/complexity?
**Target**: What would optimized usage look like?

### 7. Anti-Pattern Detection

Identify common anti-patterns:

**Good Patterns Found** (✅):
- List positive patterns observed

**Anti-Patterns Detected** (⚠️):
For each anti-pattern:
1. **Name**: Pattern name (e.g., "Agent Proliferation")
2. **Description**: What's happening
3. **Impact**: Token cost or efficiency loss
4. **Fix**: How to resolve
5. **Prevention**: How to avoid in future

**Common anti-patterns to check:**
- Agent proliferation (too many unused agents)
- Unused tool allocation (slash commands defined but empty)
- MCP "kitchen sink" (all tools loaded regardless of relevance)
- Historical documentation bloat (git history in docs)
- Duplicate documentation (same info in multiple files)
- Overly generic agents in project context
- Missing project-specific optimizations

### 8. Context Optimization Summary

Provide:
- **Current token usage**: [X] tokens
- **Optimized token usage**: [Y] tokens (after recommendations)
- **Total savings**: [Z] tokens ([%] reduction)
- **Top 5 improvements** ranked by impact
- **Quick wins** (easy changes, big impact)

### 9. Quick Optimization Commands

Provide copy-paste bash commands for:
1. Removing unused agents (with exact file paths)
2. Creating recommended project-specific agents
3. Creating recommended slash commands
4. Checking context after changes
5. Any other optimizations that can be scripted

Example:
```bash
# Remove unused global agents (2 min)
cd ~/.config/claude-code/.claude/agents/
rm -f [list].md

# Create project agent (3 min)
mkdir -p ./project/.claude/agents/
cat > ./project/.claude/agents/[name].md <<'EOF'
[content]
EOF
```

---

## Output Format:

Generate a markdown report with:
- Executive summary (2-3 sentences)
- Detailed sections as above
- Action items checklist at end
- Estimated time to implement optimizations

**Project:** {{project}}
**Analysis Date:** {{DATE}}
**Analyzed by:** Claude Code Context Analyzer v2.0

---

## Example Usage:

```bash
# In Claude Code, get context:
/context

# Copy output and run:
# "Please analyze this context using the context-analyzer prompt"
# [Paste /context output]
```
